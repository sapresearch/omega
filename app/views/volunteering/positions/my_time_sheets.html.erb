<% require_javascript 'https://www.google.com/jsapi' %>

<div class="content circle-corners-bottom">
  <div class="heading-main">
    <h1 class="page-content page_title">Time Sheets</h1>
  </div>

	<div class="right">
		<br/>
		<%= om_button(:icon=>'sort-az', :small => true) do %>
			<%= link_to 'sort A-Z', url_for(params.merge(:name => 'asc')) %>
		<% end %>
		<%= om_button(:icon=>'sort-za', :small => true) do %>
			<%= link_to 'sort Z-A', url_for(params.merge(:name => 'desc')) %>
		<% end %>
	</div>

	<div class="clear"></div>

	<% if @timesheets.empty? %>
		<strong>You Don't Have Any Time Sheets Yet!</strong><br/><br/>
	<% else %>
		<% @timesheets.each do |timesheet| %>
			<% timesheet.each do |t| %>
				<h2><%= Volunteering::Position.find_by_id(Volunteering::Record.find_by_id(t.record_id).position_id).name %></h2>
				<span class="cf3a72">From: </span> <span class="date"> <%= start = t.week.strftime('%Y-%m-%d') %> </span>
				<span class="cf3a72">To: </span>   <span class="date">  <%= Date.parse(start).advance(:days => 6).to_time.strftime('%Y-%m-%d') %></span>
				<% unless t.nil? %>
					<table class="width-100">
						<thead>
							<th class="ui-state-default"></th>
							<th class="ui-state-default">MON</th>
							<th class="ui-state-default">TUE</th>
							<th class="ui-state-default">WED</th>
							<th class="ui-state-default">THU</th>
							<th class="ui-state-default">FRI</th>
							<th class="ui-state-default">SAT</th>
							<th class="ui-state-default">SUN</th>
						</thead>
						<tr class="odd">
							<td>Hours</td>
							<% @entry_days.each do |ed| %>
								<% if t.id == ed.time_entry_id %>
									<td><%= ed.hours %></td>
								<% end %>
							<% end %>
						</tr>
					</table>
				<% end %>
			<% end %>
		<% end %>
	<% end %>
	
	<% @records.each do |r| %>
		<%= om_button(:icon => 'clock') do %>
			<%=  link_to 'Record Hours Now!', new_volunteering_time_entry_path(:id => r.id) %>
		<% end %>
	<% end %>
	
  <div id="volunteer_charts">
    <div id="range_slider_div"></div>
    <div id="category_filter_div">
    	<input type="radio" name="period" value="this_year" onclick="setPeriod(1);" checked /> Current Year &nbsp;
    	<input type="radio" name="period" value="this_month" onclick="setPeriod(2);" /> Current Month &nbsp;
    	<input type="radio" name="period" value="last_month" onclick="setPeriod(3);" /> Last Month
    </div>
    <div id="pie_chart_div" style="color: #E1DFCB"></div>
  </div>
                
</div>
<script type="text/javascript">
  // Load the Visualization API and the controls package.
  google.load('visualization', '1.0', {'packages':['controls']});

  // Set a callback to run when the Google Visualization API is loaded.
  google.setOnLoadCallback(drawDashboard);

	var data = [];
	var pieChart;
	var current_set = 0;
	var dashboard;

  // Callback that creates and populates a data table,
  // instantiates a dashboard, a range slider and a pie chart,
  // passes in the data and draws it.
  function drawDashboard() {

	  // Create our data table.
	  data[0] = google.visualization.arrayToDataTable(
	    <%= raw  Contact.includes(:records => :position).all.map{
	      |c| [c.first_name.to_s, c.records.inject(0) {
	          |result,record|
	          	if(record.position.start.to_i > Time.new(Time.new.year, 1, 1).to_i && record.position.start.to_i < Time.new(Time.new.year, 12, Time.days_in_month(12, Time.new.year)).to_i)
	          		result += (record.position.end - record.position.start).to_i / 3600.0
	          	end
	          	result
	        }]
	    }.sort{ |a, b| b[1] <=> a[1] }.insert(0, ['Volunteer', 'Hours'])
	    %>
	  );

	  data[1] = google.visualization.arrayToDataTable(
		    <%= raw  Contact.includes(:records => :position).all.map{
		      |c| [c.first_name.to_s, c.records.inject(0) {
		          |result,record|
		          	if(record.position.start.to_i > Time.new(Time.new.year, Time.new.month, 1).to_i && record.position.start.to_i < Time.new(Time.new.year, Time.new.month, Time.days_in_month(Time.new.month, Time.new.year)).to_i)
		          		result += (record.position.end - record.position.start).to_i / 3600.0
		          	end
		          	result
		        }]
		    }.sort{ |a, b| b[1] <=> a[1] }.insert(0, ['Volunteer', 'Hours'])
	    	%>
	  );

	  data[2] = google.visualization.arrayToDataTable(
		    <%= raw  Contact.includes(:records => :position).all.map{
		      |c| [c.first_name.to_s, c.records.inject(0) {
		          |result,record|
		          	if(record.position.start.to_i > Time.new(Time.new.year, Time.new.month-1, 1).to_i && record.position.start.to_i < Time.new(Time.new.year, Time.new.month-1, Time.days_in_month(Time.new.month-1, Time.new.year)).to_i)
		          		result += (record.position.end - record.position.start).to_i / 3600.0
		          	end
		          	result
		        }]
		    }.sort{ |a, b| b[1] <=> a[1] }.insert(0, ['Volunteer', 'Hours'])
		    %>
	  );

	  // Create a dashboard.
	  dashboard = new google.visualization.Dashboard(
	      document.getElementById('volunteer_charts'));

	  // Create a range slider, passing some options
	  var donutRangeSlider = new google.visualization.ControlWrapper({
	    'controlType': 'NumberRangeFilter',
	    'containerId': 'range_slider_div',
	    'options': {
	      'filterColumnLabel': 'Hours'
	      , 'ui': { 'labelStacking': 'vertical' }
	    }
	  });

	  // Define a category picker control for the Gender column
	  var categoryPicker = new google.visualization.ControlWrapper({
	    'controlType': 'CategoryFilter',
	    'containerId': 'category_filter_div',
	    'options': {
	      'filterColumnLabel': 'Volunteer',
	      'ui': {
	      'labelStacking': 'vertical',
	        'allowTyping': false,
	        'allowMultiple': false
	      }
	    }
	  });

	  // Create a pie chart, passing some options
	  pieChart = new google.visualization.ChartWrapper({
	    'chartType': 'PieChart',
	    'containerId': 'pie_chart_div',
	    'options': {
	      title: 'Volunteer Contributions'
	      , chartArea: { left: 5, top: 40 }
	      , pieSliceText: 'value'
	      , is3D: true
	      , backgroundColor: {'stroke': '#E2DFCB', 'fill': '#E1DFCB'}
	      , chartArea: { left: 30, top: 30, width: 400, height: 400 }
	    }
	  });

	  // Establish dependencies, declaring that 'filter' drives 'pieChart',
	  // so that the pie chart will only display entries that are let through
	  // given the chosen slider range.
	  dashboard.bind(donutRangeSlider, pieChart);
	  drawChart();
	}

function drawChart() {
	// dashboard.bind(categoryPicker, pieChart);
	// Draw the dashboard.
	dashboard.draw(data[current_set]);
}

//method to update the data in the chart. this is triggered by the onclick event from the radio buttons
function setPeriod(option) {
	if(option == 1) {//this year
		current_set = 0;
	  	drawChart();
	}
	if(option == 2) {//this month
		current_set = 1;
	  	drawChart();
	}
	if(option == 3) {//last  month
		current_set = 2;
	  	drawChart();
	}
}
</script>

